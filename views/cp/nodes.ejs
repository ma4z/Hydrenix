<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= name %> Nodes Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Dark Mode Background Gradient */
        .bg-gradient-to-br {
            background: linear-gradient(135deg, #1e293b, #4f46e5); /* dark blue to deep purple */
        }
        /* Dark Mode Form Container */
        .form-container {
            backdrop-filter: blur(8px);
            background-color: rgba(31, 41, 55, 0.85); /* semi-transparent dark background */
        }
        /* Modal Styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; 
            z-index: 50; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.8); /* Black w/ opacity */
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-gray-900 to-blue-900">

    <div class="w-full max-w-6xl p-8 space-y-6 rounded-lg shadow-lg form-container">
        <div class="text-center">
            <h2 class="mt-4 text-4xl font-bold text-white">Manage Nodes</h2>
            <p class="text-sm text-gray-400">Create and manage your nodes.</p>
        </div>

        <div class="text-right mb-4">
            <button id="createNodeBtn" class="inline-block px-4 py-2 text-white bg-indigo-600 rounded-lg hover:bg-indigo-700">Create Node</button>
        </div>

        <!-- Node List -->
        <div class="overflow-x-auto">
            <table class="min-w-full text-left text-gray-200">
                <thead class="bg-gray-800">
                    <tr>
                        <th class="px-4 py-2">Name</th>
                        <th class="px-4 py-2">Processor</th>
                        <th class="px-4 py-2">NodeID</th>
                        <th class="px-4 py-2">Connection</th>
                        <th class="px-4 py-2">Status</th>
                        <th class="px-4 py-2">Actions</th>
                    </tr>
                </thead>
                <tbody id="nodeList" class="bg-gray-700">
                    <% nodes.forEach(node => { %>
                        <tr class="hover:bg-gray-600 transition duration-150 ease-in-out cursor-pointer"
                            onclick="showNodeModal({
                                name: '<%= node.name %>',
                                status: '<%= node.status %>',
                                cpuUsage: '<%= node.cpu %>%', // Replace with actual data if available
                                totalCPU: '<%= node.totalCores %>', // Replace with actual data
                                memoryUsed: '<%= node.ram %> GiB', // Replace with actual data
                                memoryTotal: '<%= node.totalRam %> GiB', // Replace with actual data
                                diskUsed: '<%= node.disk %> GiB', // Replace with actual data
                                diskTotal: '<%= node.totalDisk %> GiB' // Replace with actual data
                            })">
                            <td class="px-6 py-4 border-b border-gray-600"><%= node.name %></td>
                            <td class="px-6 py-4 border-b border-gray-600"><%= node.processor %></td>
                            <td class="px-6 py-4 border-b border-gray-600"><%= node.id %></td>
                            <td class="px-6 py-4 border-b border-gray-600"><%= node.remote %>:<%= node.port %></td>
                            <td class="px-6 py-4 border-b border-gray-600">
                                <% if (node.status === "online") { %>
                                    <span class="relative inline-flex rounded-full h-2 w-2 bg-emerald-500"></span>
                                <% } else { %>
                                    <span class="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
                                <% } %>
                            </td>
                            <td class="px-6 py-4 border-b border-gray-600">
                                <button class="text-red-500 hover:text-red-700 transition duration-200" onclick="event.stopPropagation(); nodeDelete('<%= node.id %>', '<%= node.name %>')">Delete</button>
                            </td>
                        </tr>
                    <% }) %>
                    
                </tbody>                
            </table>
        </div>
    </div>

    <div id="nodeModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-70 hidden transition-opacity duration-300">
        <div class="bg-gradient-to-br from-gray-900 via-gray-800 to-gray-700 p-8 rounded-xl w-1/3 shadow-2xl transform transition-all duration-300 ease-in-out scale-100 hover:scale-105">
            
            <!-- Modal Header -->
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-extrabold text-white" id="modalNodeName">Node Details</h2>
                <button onclick="closeModal()" class="text-white text-xl font-bold hover:text-gray-300 transition duration-200">&times;</button>
            </div>
            
            <!-- Status -->
            <div class="mb-4">
                <p class="text-gray-400"><strong>Status:</strong> <span id="modalNodeStatus" class="text-green-400">N/A</span></p>
            </div>
    
            <!-- CPU Usage -->
            <div class="mb-4">
                <p class="text-gray-400 mb-1"><strong>CPU Usage:</strong> <span id="modalNodeCPU" class="text-red-400">N/A</span></p>
                <div class="w-full bg-gray-700 rounded-full h-4 shadow-inner">
                    <div id="modalNodeCPUBar" class="bg-gradient-to-r from-red-500 to-red-700 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
                </div>
            </div>
            
            <!-- Memory Usage -->
            <div class="mb-4">
                <p class="text-gray-400 mb-1"><strong>Memory Usage:</strong> <span id="modalNodeMemory" class="text-blue-400">N/A</span></p>
                <div class="w-full bg-gray-700 rounded-full h-4 shadow-inner">
                    <div id="modalNodeMemoryBar" class="bg-gradient-to-r from-blue-500 to-blue-700 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
                </div>
            </div>
            
            <!-- Bootdisk Size -->
            <div class="mb-4">
                <p class="text-gray-400 mb-1"><strong>Bootdisk Size:</strong> <span id="modalNodeDisk" class="text-yellow-400">N/A</span></p>
                <div class="w-full bg-gray-700 rounded-full h-4 shadow-inner">
                    <div id="modalNodeDiskBar" class="bg-gradient-to-r from-yellow-500 to-yellow-700 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
                </div>
            </div>
            
            <!-- Close Button -->
            <div class="flex justify-end">
                <button onclick="closeModal()" class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white font-semibold px-6 py-2 rounded-full shadow-lg hover:bg-indigo-700 transition duration-300">Close</button>
            </div>
        </div>
    </div>
    
    
    <!-- Modal for Creating a New Node -->
    <div id="createNodeModal" class="modal inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50">
        <div class="modal-content bg-white rounded-lg shadow-lg p-6 w-96">
            <span id="closeModal" class="close cursor-pointer text-red-500 float-right text-2xl">&times;</span>
            <h3 class="text-2xl font-bold mb-4">Create New Node</h3>
            <form id="createNodeForm" class="space-y-4">
                <div>
                    <label for="nodeName" class="block text-sm font-medium text-gray-700">Name:</label>
                    <input type="text" id="nodeName" name="nodeName" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <div>
                    <label for="nodeProcessor" class="block text-sm font-medium text-gray-700">Processor:</label>
                    <input type="text" id="nodeProcessor" name="nodeProcessor" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <div>
                    <label for="nodeRemote" class="block text-sm font-medium text-gray-700">Remote:</label>
                    <input type="text" id="nodeRemote" name="nodeRemote" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <div>
                    <label for="nodePort" class="block text-sm font-medium text-gray-700">Port:</label>
                    <input type="number" id="nodePort" name="nodePort" class="mt-1 block w-full p-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500" required>
                </div>
                <button type="submit" class="w-full p-2 text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition duration-200">Create Node</button>
            </form>
        </div>
    </div>
    
        

    <script>
        // Modal Functionality
        const modal = document.getElementById("createNodeModal");
        const btn = document.getElementById("createNodeBtn");
        const span = document.getElementById("closeModal");

        btn.onclick = function() {
            modal.style.display = "block";
        }

        span.onclick = function() {
            modal.style.display = "none";
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }


        // Function to handle node action
        function nodeDelete(id, nodeName) {
    // Confirm deletion
    if (confirm(`Are you sure you want to delete the node: ${nodeName}?`)) {
        fetch(`/node/delete/${id}`, {
            method: 'GET'
        })
        .then(response => {
            if (response.ok) {
                alert('Node deleted successfully');
                // Optionally refresh the node list or update the UI to reflect the deletion
                location.reload(); // Reloads the page to show updated node list
            } else {
                throw new Error('Failed to delete the node');
            }
        })
        .catch(error => {
            console.error('Error deleting node:', error);
            alert('Error deleting node: ' + error.message);
        });
    }
}
        // Form submission logic for creating a new node
        document.getElementById("createNodeForm").addEventListener("submit", async function(event) {
            event.preventDefault();

            const name = document.getElementById('nodeName').value;
            const processor = document.getElementById('nodeProcessor').value;
            const remote = document.getElementById('nodeRemote').value;
            const port = document.getElementById('nodePort').value;

            try {
                const response = await fetch(`/create/node/${name}/${remote}/${port}/${processor}`, {
                    method: 'POST',
                });

                if (response.ok) {
                    alert("Node Created!");
                    location.reload(); 
                    modal.style.display = "none"; // Close modal after creation
                } else {
                    alert("Error creating node.");
                }
            } catch (error) {
                console.error('Error creating node:', error);
            }
        });

        // Initial fetch to populate the node lis

    </script>
    <script>
        function showNodeModal(node) {
            // Set the node details in the modal
            document.getElementById('modalNodeName').innerText = node.name;
            document.getElementById('modalNodeStatus').innerText = node.status;
            document.getElementById('modalNodeCPU').innerText = `${node.cpuUsage} of ${node.totalCPU} CPUs`;
            document.getElementById('modalNodeMemory').innerText = `${node.memoryUsed} of ${node.memoryTotal}`;
            document.getElementById('modalNodeDisk').innerText = `${node.diskUsed} of ${node.diskTotal}`;
    
            // Show the modal
            document.getElementById('nodeModal').classList.remove('hidden');
        }
    
        function closeModal() {
            document.getElementById('nodeModal').classList.add('hidden');
        }
    </script>
    
    
</body>
</html>
